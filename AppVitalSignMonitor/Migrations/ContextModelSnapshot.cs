// <auto-generated />
using System;
using AppVitalSignMonitor;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppVitalSignMonitor.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppVitalSignMonitor.Models.Alarma", b =>
                {
                    b.Property<string>("IdAlarma")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreadorIdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DispositivoIdDispositivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("PacienteIdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TipoAlarma")
                        .HasColumnType("int");

                    b.Property<int>("TipoComparacion")
                        .HasColumnType("int");

                    b.Property<float>("ValorComparativo")
                        .HasColumnType("real");

                    b.HasKey("IdAlarma");

                    b.HasIndex("CreadorIdUsuario");

                    b.HasIndex("DispositivoIdDispositivo");

                    b.HasIndex("PacienteIdUsuario");

                    b.ToTable("Alarmas");
                });

            modelBuilder.Entity("AppVitalSignMonitor.Models.Dispositivo", b =>
                {
                    b.Property<string>("IdDispositivo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreadorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Detalles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreDispositivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PacienteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PacienteIdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tokken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UltimaModificacion")
                        .HasColumnType("datetime2");

                    b.HasKey("IdDispositivo");

                    b.HasIndex("CreadorId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("PacienteIdUsuario")
                        .IsUnique()
                        .HasFilter("[PacienteIdUsuario] IS NOT NULL");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("AppVitalSignMonitor.Models.Reporte", b =>
                {
                    b.Property<string>("IdDispositivo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DispositivoIdDispositivo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("HoraFecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("PacienteIdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("PresionDiastolica")
                        .HasColumnType("real");

                    b.Property<float?>("PresionSistolica")
                        .HasColumnType("real");

                    b.Property<int?>("Pulso")
                        .HasColumnType("int");

                    b.Property<int?>("SaturacionOxigeno")
                        .HasColumnType("int");

                    b.Property<float?>("Temperatura")
                        .HasColumnType("real");

                    b.HasKey("IdDispositivo");

                    b.HasIndex("DispositivoIdDispositivo");

                    b.HasIndex("PacienteIdUsuario");

                    b.ToTable("Reportes");
                });

            modelBuilder.Entity("AppVitalSignMonitor.Models.Usuario", b =>
                {
                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rol")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuarios");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AppVitalSignMonitor.Models.Administrador", b =>
                {
                    b.HasBaseType("AppVitalSignMonitor.Models.Usuario");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("AppVitalSignMonitor.Models.Medico", b =>
                {
                    b.HasBaseType("AppVitalSignMonitor.Models.Usuario");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("AppVitalSignMonitor.Models.Paciente", b =>
                {
                    b.HasBaseType("AppVitalSignMonitor.Models.Usuario");

                    b.Property<string>("Detalles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrupoSanguineo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("AppVitalSignMonitor.Models.Alarma", b =>
                {
                    b.HasOne("AppVitalSignMonitor.Models.Usuario", "Creador")
                        .WithMany()
                        .HasForeignKey("CreadorIdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppVitalSignMonitor.Models.Dispositivo", "Dispositivo")
                        .WithMany()
                        .HasForeignKey("DispositivoIdDispositivo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppVitalSignMonitor.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteIdUsuario");

                    b.Navigation("Creador");

                    b.Navigation("Dispositivo");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("AppVitalSignMonitor.Models.Dispositivo", b =>
                {
                    b.HasOne("AppVitalSignMonitor.Models.Usuario", "Creador")
                        .WithMany()
                        .HasForeignKey("CreadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppVitalSignMonitor.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVitalSignMonitor.Models.Paciente", null)
                        .WithOne("Dispositivo")
                        .HasForeignKey("AppVitalSignMonitor.Models.Dispositivo", "PacienteIdUsuario");

                    b.Navigation("Creador");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("AppVitalSignMonitor.Models.Reporte", b =>
                {
                    b.HasOne("AppVitalSignMonitor.Models.Dispositivo", "Dispositivo")
                        .WithMany()
                        .HasForeignKey("DispositivoIdDispositivo");

                    b.HasOne("AppVitalSignMonitor.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteIdUsuario");

                    b.Navigation("Dispositivo");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("AppVitalSignMonitor.Models.Administrador", b =>
                {
                    b.HasOne("AppVitalSignMonitor.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("AppVitalSignMonitor.Models.Administrador", "IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppVitalSignMonitor.Models.Medico", b =>
                {
                    b.HasOne("AppVitalSignMonitor.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("AppVitalSignMonitor.Models.Medico", "IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppVitalSignMonitor.Models.Paciente", b =>
                {
                    b.HasOne("AppVitalSignMonitor.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("AppVitalSignMonitor.Models.Paciente", "IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppVitalSignMonitor.Models.Paciente", b =>
                {
                    b.Navigation("Dispositivo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
